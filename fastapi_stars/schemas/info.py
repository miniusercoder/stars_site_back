from typing import Literal

from pydantic import BaseModel, Field, field_validator

from fastapi_stars.settings import settings

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤/–∑–∞–∫–∞–∑–æ–≤
type Item = Literal["star", "premium", "ton", "gift"]


class PriceWithCurrency(BaseModel):
    """–ß–∏—Å–ª–æ–≤–∞—è —Ü–µ–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã."""

    price: float = Field(
        ..., description="–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.", examples=[1.23, 99.99]
    )
    currency: Literal["rub", "usd"] = Field(
        "usd",
        description="–ö–æ–¥ –≤–∞–ª—é—Ç—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è `usd` –∏ `rub`.",
        examples=["usd"],
    )


class PricesWithCurrency(BaseModel):
    """–¶–µ–Ω–∞ –≤ –¥–≤—É—Ö –≤–∞–ª—é—Ç–∞—Ö ‚Äî RUB –∏ USD."""

    price_rub: PriceWithCurrency = Field(..., description="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö.")
    price_usd: PriceWithCurrency = Field(..., description="–¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê.")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "price_usd": {"currency": "usd", "price": 12.34},
                    "price_rub": {"currency": "rub", "price": 1200.56},
                }
            ]
        }
    }


class HeaderPrices(BaseModel):
    """–ù–∞–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–∞–π—Ç–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    star: PricesWithCurrency = Field(..., description="–¶–µ–Ω–∞ Stars (–∑–∞ 1 Star).")
    ton: PricesWithCurrency = Field(..., description="–¶–µ–Ω–∞ TON (–∑–∞ 1 TON).")


class ItemPrice(BaseModel):
    """–¶–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""

    amount: int = Field(
        ...,
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–µ–¥–º–µ—Ç–∞.",
        examples=[50, 500, 3, 6, 12, 1000],
    )
    prices: PricesWithCurrency = Field(..., description="–¶–µ–Ω–∞ –≤ USD –∏ RUB.")


class ProjectStats(BaseModel):
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º."""

    stars_today: int = Field(
        ..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars, –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è.", examples=[0, 1500]
    )
    stars_total: int = Field(
        ..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.", examples=[250000]
    )
    premium_today: int = Field(
        ...,
        description="Premium-–ø–æ–¥–ø–∏—Å–æ–∫, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è.",
        examples=[0, 12],
    )
    premium_total: int = Field(
        ..., description="Premium-–ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.", examples=[5433]
    )


class TelegramUserIn(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram-–ø–æ–ª—É—á–∞—Ç–µ–ª—è."""

    username: str = Field(
        None,
        pattern=r"^[a-zA-Z0-9_]{5,32}$",
        description="Telegram username –±–µ–∑ @, 5‚Äì32 —Å–∏–º–≤–æ–ª–æ–≤: –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ.",
        examples=["durov", "telegram"],
    )
    order_type: Item = Field(
        "star",
        alias="type",
        description="–¢–∏–ø –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: `star`, `premium`, `ton`, `gift`.",
        examples=["star"],
    )


class TelegramUser(BaseModel):
    """–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ/–∫–∞–Ω–∞–ª–µ."""

    name: str = Field(..., description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è.")
    photo: str | None = Field(
        None,
        description="URL –∞–≤–∞—Ç–∞—Ä–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω).",
        examples=[None, "https://.../avatar.jpg"],
    )


class TelegramUserResponse(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram-–ø–æ–ª—É—á–∞—Ç–µ–ª—è."""

    success: bool = Field(..., description="–§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    error: Literal["not_found", "already_subscribed"] | None = Field(
        None,
        description="–ö–æ–¥ –æ—à–∏–±–∫–∏. `already_subscribed` ‚Äî –¥–ª—è Premium, –µ—Å–ª–∏ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.",
    )
    result: TelegramUser | None = Field(
        None, description="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏ `success=True`."
    )

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "success": True,
                    "result": {"name": "Alice", "photo": "https://.../a.jpg"},
                    "error": None,
                },
                {"success": False, "result": None, "error": "not_found"},
            ]
        }
    }


class GiftModel(BaseModel):
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏ –µ–≥–æ —Ü–µ–Ω–∞."""

    id: str = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–∞.")
    emoji: str = Field(..., description="–≠–º–æ–¥–∑–∏ –ø–æ–¥–∞—Ä–∫–∞.", examples=["üéÅ"])
    prices: PricesWithCurrency = Field(..., description="–¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ –≤ –≤–∞–ª—é—Ç–∞—Ö.")


class GiftsResponse(BaseModel):
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤."""

    gifts: list[GiftModel] = Field(..., description="–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤.")


class PaymentMethodModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞."""

    id: int = Field(..., description="ID –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã.")
    name: str = Field(..., description="–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞.")
    icon: str | None = Field(None, description="–ê–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å).")

    @field_validator("icon", mode="before")
    @classmethod
    def serialize_icon(cls, value):
        if not value:
            return None
        return f"{settings.site_url}{value.url}"


class PaymentMethodsResponse(BaseModel):
    """–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""

    methods: list[PaymentMethodModel] = Field(
        ..., description="–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É."
    )
